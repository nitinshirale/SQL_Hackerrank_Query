Query all columns for all American cities in CITY with populations larger than 100000. The CountryCode for America is USA.

ans--select * from city where population>100000 and CountryCode='USA' ;

Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.

--select name from city where COUNTRYCODE ='JPN';
Query a list of CITY names from STATION with even ID numbers only. You may print the results in any order, but must exclude duplicates from your answer

SELECT DISTINCT city FROM station WHERE MOD(id,2)=0;

In other words, find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.

---select count(city)-count(distinct city) from station----

Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.

---SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY), CITY LIMIT 1;
SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY) DESC, CITY LIMIT 1;

Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates
-----SELECT distinct CITY 
FROM STATION 
where (CITY LIKE 'a%' 
    OR CITY LIKE 'e%' 
    OR CITY LIKE 'i%' 
    OR CITY LIKE 'o%'
    OR CITY LIKE 'u%'
) 

--Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
---Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
ELECT distinct CITY 
FROM STATION 
where CITY LIKE '%a' 
    OR CITY LIKE '%e' 
    OR CITY LIKE '%i' 
    OR CITY LIKE '%o'
    OR CITY LIKE '%u'
;

--Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.
SELECT distinct CITY 
FROM STATION 
where (CITY LIKE 'a%' 
    OR CITY LIKE 'e%' 
    OR CITY LIKE 'i%' 
    OR CITY LIKE 'o%'
    OR CITY LIKE 'u%'
) AND (CITY LIKE '%a' 
    OR CITY LIKE '%e'
    OR CITY LIKE '%i'
    OR CITY LIKE '%o'
    OR CITY LIKE '%u'
)---

--Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
--SELECT distinct CITY 
FROM STATION 
where CITY not LIKE 'a%' 
    and CITY not LIKE 'e%' 
    and CITY not LIKE 'i%' 
    and CITY not LIKE 'o%'
    and CITY not LIKE 'u%'
;--
--
Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.
--select distinct CITY from STATION where substr(CITY,1,1) not in ('A','E','I','O','U') AND substr(CITY,-1,1) not in ('A','E','I','O','U');
--Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
--select Name from STUDENTS where Marks >75  ORDER BY substr(Name,-3),id;
Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order
---select name from Employee  order by name;

---Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees for less than  months. Sort your result by ascending employee_id.

---select name from Employee where salary >2000 and months<10 order by employee_id;

Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's 0 key was broken until after completing the calculation. She wants your help finding the difference between her miscalculation (using salaries with any zeroes removed), and the actual average salary.

Write a query calculating the amount of error (i.e.: actual -Miscalculate average monthly salaries), and round it up to the next integer.


---Query the following two values from the STATION table:

The sum of all values in LAT_N rounded to a scale of  decimal places.
The sum of all values in LONG_W rounded to a scale of  decimal places.
--select ROUND(SUM(LAT_N), 2), ROUND(SUM(LONG_W), 2) from STATION ;
---Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2345. Truncate your answer to  decimal places.
---select round(sum(lat_n),4) from station where LAT_N>38.7880 and Lat_n <137.2345 ;


----Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.

-----SELECT CASE WHEN A + B > C AND A+C>B AND B+C>A THEN 
CASE WHEN A = B AND B = C THEN 'Equilateral' 
WHEN A = B OR B = C OR A = C THEN 'Isosceles' 
WHEN A != B OR B != C OR A != C THEN 'Scalene' 
END ELSE 'Not A Triangle' END FROM TRIANGLES;

----Generate the following two result sets:

---Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format: 

There are a total of [occupation_count] [occupation]s.
where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.

Note: There will be at least two entries in the table for each type of occupation.-----

---SELECT CONCAT(Name,CONCAT('(', LEFT(Occupation,1),')'))FROM OCCUPATIONS ORDER BY Name ASC;

SELECT 
    CONCAT("There are a total of" " ",
           COUNT(occupation), 
           " ",  LCASE(occupation),   "s",
           ".")
                     AS stat
FROM OCCUPATIONS
GROUP By occupation
ORDER BY COUNT(occupation) ASC, occupation;BY SELECTNUMBER ASC, THETEXT ASC;